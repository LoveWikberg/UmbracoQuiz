@model CreateRoomModel
@using UmbracoQuiz.Core.Models
@using UmbracoQuiz.Core.Controllers

<div id="createRoomModal" class="custom-modal-container @(TempData["showModal"] != null && (bool)TempData["showModal"] == true ? "" : "hide")">
    <div class="custom-modal small-modal">
        @using (Html.BeginUmbracoForm<GameRoomController>(nameof(GameRoomController.CreateRoom), FormMethod.Post))
        {
            <div class="form-control">
                @Html.LabelFor(x => x.Name)
                @Html.EditorFor(x => x.Name)
                @Html.ValidationMessageFor(x => x.Name)
            </div>
            <div class="form-control">
                @Html.LabelFor(x => x.MinPlayers)
                @Html.EditorFor(x => x.MinPlayers)
                @Html.ValidationMessageFor(x => x.MinPlayers)
            </div>
            <div class="form-control">
                @Html.LabelFor(x => x.MaxPlayers)
                @Html.EditorFor(x => x.MaxPlayers)
                @Html.ValidationMessageFor(x => x.MaxPlayers)
            </div>
            <div class="form-control">
                @Html.LabelFor(x => x.SelectedQuizId)

                @Html.DropDownListFor(m => m.SelectedQuizId, Model.Quizes, "Välj quiz")

                @*<select name="@Model.SelectedQuizId">
                    @foreach (var quiz in Model.Quizes)
                    {
                        <option value="@quiz.Value">@quiz.Text</option>
                    }
                </select>*@
                @Html.ValidationMessageFor(x => x.SelectedQuizId)
            </div>
            <div class="custom-modal__button-section">
                <button type="submit" class="button-strong">Skapa rum</button>
                <button type="button" data-close-modal="" class="button-weak">Avbryt</button>
            </div>
        }
    </div>
</div>